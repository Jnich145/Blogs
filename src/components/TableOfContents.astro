---
interface Props {
  headings: { text: string; slug: string }[];
}

const { headings } = Astro.props;
---

<nav class="sticky top-8 transition-all duration-300" id="toc-container">
  <button id="toc-toggle" class="mb-4 p-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors">
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 h-6">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
    </svg>
  </button>
  <div id="toc-content" class="hidden p-6 rounded-xl border border-gray-200 dark:border-gray-700 bg-white/80 dark:bg-gray-800/80 backdrop-blur-lg shadow-lg">
    <h2 class="text-xl font-semibold mb-4 text-gray-900 dark:text-gray-100">Contents</h2>
    <ul class="space-y-3">
      {headings.map(({ text, slug }) => (
        <li>
          <a 
            href={`#${slug}`} 
            class="block py-2 px-4 text-sm text-gray-700 dark:text-gray-300 hover:bg-indigo-50 dark:hover:bg-indigo-900/50 rounded transition-colors duration-200"
          >
            {text}
          </a>
        </li>
      ))}
    </ul>
  </div>
</nav>

<script>
  const tocToggle = document.getElementById('toc-toggle');
  const tocContent = document.getElementById('toc-content');
  const tocContainer = document.getElementById('toc-container');

  tocToggle.addEventListener('click', () => {
    tocContent.classList.toggle('hidden');
    tocContainer.classList.toggle('w-64');
  });

  const links = document.querySelectorAll('nav a');
  const sections = document.querySelectorAll('h2[id]');

  const observerOptions = {
    root: null,
    rootMargin: '-20% 0px -60% 0px',
    threshold: 0
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      const link = [...links].find(link => 
        link.getAttribute('href') === `#${entry.target.id}`
      );
      
      if (entry.isIntersecting) {
        links.forEach(l => {
          l.classList.remove('text-blue-600', 'dark:text-blue-400', 'border-blue-600', 'dark:border-blue-400', 'font-medium');
          l.classList.add('text-slate-700', 'dark:text-slate-300');
        });
        
        if (link) {
          link.classList.remove('text-slate-700', 'dark:text-slate-300');
          link.classList.add('text-blue-600', 'dark:text-blue-400', 'font-medium');
        }
      }
    });
  }, observerOptions);

  sections.forEach(section => observer.observe(section));

  // Handle smooth scrolling
  links.forEach(link => {
    link.addEventListener('click', (e) => {
      e.preventDefault();
      const targetId = link.getAttribute('href');
      const targetElement = document.querySelector(targetId);
      if (targetElement) {
        targetElement.scrollIntoView({ behavior: 'smooth' });
      }
    });
  });
</script>

<style>
  nav a {
    @apply transition-all duration-200;
  }

  nav a:hover {
    @apply translate-x-1;
  }
</style>
