---
interface Props {
	title: string;
	description?: string;
	image?: string;
}

const { 
	title, 
	description = "A Call for National Unity: A Plea for Healing",
	image = "/Blogs/og-image.jpg"
} = Astro.props;

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
const ogImageURL = new URL(image, Astro.site);
---

<!doctype html>
<html lang="en" class="scroll-smooth">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content={description} />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Merriweather:ital,wght@0,300;0,400;0,700;1,400&display=swap" rel="stylesheet">
		
		<!-- Open Graph / Facebook -->
		<meta property="og:type" content="website" />
		<meta property="og:url" content={canonicalURL} />
		<meta property="og:title" content={title} />
		<meta property="og:description" content={description} />
		<meta property="og:image" content={ogImageURL} />

		<!-- Twitter -->
		<meta property="twitter:card" content="summary_large_image" />
		<meta property="twitter:url" content={canonicalURL} />
		<meta property="twitter:title" content={title} />
		<meta property="twitter:description" content={description} />
		<meta property="twitter:image" content={ogImageURL} />
	</head>
	<body class="antialiased bg-black">
		<canvas id="smoke-canvas" class="fixed inset-0 w-full h-full pointer-events-none"></canvas>
		<div class="relative z-10">
			<slot />
		</div>
	</body>
</html>

<style is:global>
	:root {
		color-scheme: light dark;
	}
	
	html {
		font-family: 'Merriweather', serif;
		text-rendering: optimizeLegibility;
		-webkit-font-smoothing: antialiased;
		-moz-osx-font-smoothing: grayscale;
	}

	body {
		margin: 0;
		min-height: 100vh;
		overflow-x: hidden;
		background-color: #1a1a1a; /* Darker background */
	}

	#smoke-background {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		pointer-events: none;
		z-index: 0;
	}
</style>

<script>
	class SmokeParticle {
		constructor(x, y) {
			this.x = x;
			this.y = y;
			this.size = Math.random() * 20 + 10; // Increased size
			this.speedX = Math.random() * 2 - 1; // Increased horizontal speed
			this.speedY = Math.random() * -2 - 0.5; // Increased upward speed
			this.opacity = Math.random() * 0.5 + 0.1;
			this.lifespan = Math.random() * 200 + 100; // Added lifespan
		}

		update() {
			this.x += this.speedX;
			this.y += this.speedY;
			this.lifespan--;
			this.opacity -= 0.002;
			this.size += 0.1;
		}

		draw(ctx) {
			ctx.fillStyle = `rgba(255, 255, 255, ${this.opacity})`;
			ctx.beginPath();
			ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
			ctx.fill();
		}
	}

	const canvas = document.getElementById('smoke-canvas');
	const ctx = canvas.getContext('2d');
	let particles = [];
	let animationId;
	let mouseX = 0;
	let mouseY = 0;

	function resizeCanvas() {
		canvas.width = window.innerWidth;
		canvas.height = window.innerHeight;
	}

	function createParticles() {
		const particleCount = Math.floor(canvas.width / 5); // Increased particle count
		for (let i = 0; i < particleCount; i++) {
			particles.push(new SmokeParticle(
				Math.random() * canvas.width, 
				canvas.height + Math.random() * 100 // Start particles below the screen
			));
		}
	}

	function animate() {
		ctx.clearRect(0, 0, canvas.width, canvas.height);
		particles.forEach((particle, index) => {
			particle.update();
			particle.draw(ctx);
			if (particle.opacity <= 0 || particle.lifespan <= 0 || particle.y < canvas.height * 0.3) { // Remove particles that reach top 30% of screen
				particles.splice(index, 1);
			}
		});

		if (particles.length < 100) {
			createParticles();
		}

		animationId = requestAnimationFrame(animate);
	}

	function disturbSmoke(x, y) {
		particles.forEach(particle => {
			const dx = particle.x - x;
			const dy = particle.y - y;
			const distance = Math.sqrt(dx * dx + dy * dy);
			const maxDistance = 150; // Increased influence radius

			if (distance < maxDistance) {
				const force = (maxDistance - distance) / maxDistance;
				particle.speedX += dx * force * 0.03; // Increased effect
				particle.speedY += dy * force * 0.03; // Increased effect
			}
		});
	}

	function handleMouseMove(e) {
		mouseX = e.clientX;
		mouseY = e.clientY;
		disturbSmoke(mouseX, mouseY);
	}

	function handleTouchMove(e) {
		e.preventDefault();
		const touch = e.touches[0];
		mouseX = touch.clientX;
		mouseY = touch.clientY;
		disturbSmoke(mouseX, mouseY);
	}

	window.addEventListener('resize', resizeCanvas);
	window.addEventListener('mousemove', handleMouseMove);
	window.addEventListener('touchmove', handleTouchMove, { passive: false });

	resizeCanvas();
	createParticles();
	animate();
</script>
